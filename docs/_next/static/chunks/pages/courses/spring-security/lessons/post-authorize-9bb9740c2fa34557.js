(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[613],{362:function(a,b,c){(window.__NEXT_P=window.__NEXT_P||[]).push(["/courses/spring-security/lessons/post-authorize",function(){return c(5467)}])},4621:function(c,a,b){"use strict";var d=b(5893);a.Z=function(a){var c=a.src,b=a.title;return(0,d.jsxs)("div",{className:"p-3",children:[(0,d.jsx)("div",{className:"mb-3 text-secondary text-center",children:(0,d.jsx)("em",{children:b})}),(0,d.jsx)("img",{className:"img-fluid rounded border shadow",src:c,alt:b})]})}},5467:function(f,b,a){"use strict";a.r(b);var g=a(5893),h=a(9963),i=a(130),j=a(7291),k=a(476),l=a(4621),c=a(9827),d=a(9927),e=a(358);b.default=(0,c.default)(function(b){var a=b.githubPath;return(0,g.jsxs)(g.Fragment,{children:[(0,g.jsxs)("section",{children:[(0,g.jsx)(h.nL,{children:"PostAuthorize"}),(0,g.jsxs)(i.Z,{children:[(0,g.jsx)(j.Z,{children:"@PostAuthorize"})," does the same job as ",(0,g.jsx)(j.Z,{children:"@PreAuthorize"}),", but does it after the execution of the annotated service method. In doing so we get access to the return value of the method which can be used to make authorization decision inside ",(0,g.jsx)(j.Z,{children:"@PostAuthorize"}),". But there is a caveat that any operation which changes the state of the application must be avoided."]})]}),(0,g.jsxs)("section",{children:[(0,g.jsx)(h.aC,{children:"Secure view profile service"}),(0,g.jsxs)(i.Z,{children:["Though we have secured the below service method with ",(0,g.jsx)(j.Z,{children:"VIEW_PROFILE"})," permission, any authenticated user can view other user's profile because this permission is assigned to all the Roles."]}),(0,g.jsx)(k.Z,{fileName:"UserService.java",href:a+"/src/main/java/com/facadecode/spring/security/service/UserService.java",children:"\n@PreAuthorize(Authority.VIEW_PROFILE)\npublic AppUser get(Long userId) {\n    return appUserRepository.findById(userId)\n            .orElse(null);\n}\n"}),(0,g.jsx)(i.Z,{children:"In order to secure this service method we need to ensure that the authenticated user and the requested user profile are same."}),(0,g.jsxs)(i.Z,{children:["We can get the authenticated user's ",(0,g.jsx)("em",{children:"username"})," from ",(0,g.jsx)(j.Z,{children:"Authentication"})," object in ",(0,g.jsx)(j.Z,{children:"SecurityContextHolder"}),". And Spring Security provides an in-built expression to access this ",(0,g.jsx)(j.Z,{children:"Authentication"})," object using SpEL expression ",(0,g.jsx)(j.Z,{children:"authentication"})," before the execution of the method."]}),(0,g.jsxs)(i.Z,{children:["But unless we find the requested user profile from the repository and confirm that it is same as the authenticated user we can't authorize. ",(0,g.jsx)(j.Z,{children:"@PostAuthorize"})," allows us to access this requested user profile from the return value using SpEL expression ",(0,g.jsx)(j.Z,{children:"returnObject"})," after the execution of the method."]}),(0,g.jsx)(k.Z,{fileName:"UserService.java",href:a+"/src/main/java/com/facadecode/spring/security/service/UserService.java",children:'\n@PreAuthorize(Authority.VIEW_PROFILE)\n@PostAuthorize("returnObject.username == authentication.name")\npublic AppUser get(Long userId) {\n    return appUserRepository.findById(userId)\n            .orElse(null);\n}\n'}),(0,g.jsxs)(i.Z,{children:["Here ",(0,g.jsx)(j.Z,{children:"returnObject"})," represents the return value of the method which is ",(0,g.jsx)(j.Z,{children:"AppUser"})," object. We are checking ",(0,g.jsx)("em",{children:"username"})," of the requested ",(0,g.jsx)(j.Z,{children:"AppUser"})," object is equal to the ",(0,g.jsx)("em",{children:"name"})," of the ",(0,g.jsx)(j.Z,{children:"Authentication"})," object after the execution of the method."]}),(0,g.jsxs)(i.Z,{children:["Above service returns the AppUser object only for authorized requests post execution, but throws ",(0,g.jsx)("em",{children:"403 Forbidden"})," error for unauthorized requests. Though the service executes all the time, it doesn't change the state of the application."]})]}),(0,g.jsxs)("section",{children:[(0,g.jsx)(h.aC,{children:"Test view profile"}),(0,g.jsxs)(i.Z,{children:["Now restart the application, send a GET request to ",(0,g.jsx)("u",{children:"ViewProfile"})," API using ",(0,g.jsx)("em",{children:"Gru"})," to view his own profile and we will be authorized to view his profile."]}),(0,g.jsx)(l.Z,{src:"/assets/images/spring-security/lesson15-01.png",title:"Authorized request to view Gru profile with Gru's credential"}),(0,g.jsxs)(i.Z,{children:["But we will get ",(0,g.jsx)("em",{children:"403 Forbidden"})," error if we send the same request to view Gru's user profile using any other user credentials."]}),(0,g.jsx)(l.Z,{src:"/assets/images/spring-security/lesson15-02.png",title:"Unauthorized request to view Gru profile with Bob's credential"})]})]})},(0,e.s)(d.Z,"post-authorize"))}},function(a){a.O(0,[116,891,637,462,774,888,179],function(){var b;return a(a.s=362)}),_N_E=a.O()}])