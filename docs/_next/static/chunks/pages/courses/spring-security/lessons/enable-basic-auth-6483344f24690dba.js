(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[569],{5604:function(a,b,c){(window.__NEXT_P=window.__NEXT_P||[]).push(["/courses/spring-security/lessons/enable-basic-auth",function(){return c(9665)}])},4621:function(c,a,b){"use strict";var d=b(5893);a.Z=function(a){var c=a.src,b=a.title;return(0,d.jsxs)("div",{className:"p-3",children:[(0,d.jsx)("div",{className:"mb-3 text-secondary text-center",children:(0,d.jsx)("em",{children:b})}),(0,d.jsx)("img",{className:"img-fluid rounded border shadow",src:c,alt:b})]})}},9665:function(f,b,a){"use strict";a.r(b);var g=a(5893),h=a(9963),i=a(130),j=a(7291),k=a(476),l=a(4621),c=a(9827),d=a(9927),e=a(358);b.default=(0,c.default)(function(a){var b=a.githubPath;return(0,g.jsxs)(g.Fragment,{children:[(0,g.jsxs)("section",{children:[(0,g.jsx)(h.nL,{children:"Enable Basic Authentication"}),(0,g.jsxs)(i.Z,{children:["Basic Auth is an authentication mechanism for any HTTP user agents like browser or REST clients like Postman to provide username and password when making a request. It is stateless where each request must contain Authorization header with value in the format ",(0,g.jsx)(j.Z,{children:"Basic <Credentials>"}),", where Credentials is the base64 encoding of username and password joined by a single colon (username:password)."]})]}),(0,g.jsxs)("section",{children:[(0,g.jsx)(h.aC,{children:"Configure HttpSecurity"}),(0,g.jsxs)(i.Z,{children:["We can customise the Spring Security behaviour to use only ",(0,g.jsx)(j.Z,{children:"Basic Authentication"})," and ignore form based login. We can do so by configuring web based security for all http requests using ",(0,g.jsx)(j.Z,{children:"HttpSecurity"}),". We will then use it to build and register ",(0,g.jsx)(j.Z,{children:"SecurityFilterChain"})," bean inside a ",(0,g.jsx)(j.Z,{children:"@Configuration"})," class as below:"]}),(0,g.jsx)(k.Z,{href:b+"/src/main/java/com/facadecode/spring/security/config/ApiSecurityConfig.java",fileName:"ApiSecurityConfig.java",children:"\n@Configuration\npublic class ApiSecurityConfig {\n    @Bean\n    public SecurityFilterChain apiFilterChain(HttpSecurity http) throws Exception {\n        http\n            .authorizeRequests(auth -> auth\n                .anyRequest().authenticated()\n            )\n            .httpBasic();\n        return http.build();\n    }\n}\n"}),(0,g.jsxs)(i.Z,{children:["Here we have configured ",(0,g.jsx)(j.Z,{children:"HttpSecurity"})," to authenticate any request using Basic Auth. It might sound like the default behaviour we saw earlier. But configuring ",(0,g.jsx)(j.Z,{children:"HttpSecurity"})," explicitly with ",(0,g.jsx)(j.Z,{children:"httpBasic()"})," tells Spring Security to choose only ",(0,g.jsx)(j.Z,{children:"BasicAuthenticationEntryPoint"})," as the default EntryPoint and ignore ",(0,g.jsx)(j.Z,{children:"LoginUrlAuthenticationEntryPoint"}),"."]}),(0,g.jsxs)(i.Z,{children:["Restart the application and access the ",(0,g.jsx)("u",{children:"ListCourses"})," API from the browser. It will respond with ",(0,g.jsx)("em",{children:"401 Unauthorised"})," instead of ",(0,g.jsx)("em",{children:"302 Found redirect"})," error status. Also it will enable the browser to stay on the same page and prompt us for username and password rather than redirecting to login page. Once we enter the credentials we can see the list of courses."]}),(0,g.jsx)(l.Z,{src:"/assets/images/spring-security/lesson03-01.png",title:"Browser prompting for username and password"}),(0,g.jsx)(l.Z,{src:"/assets/images/spring-security/lesson03-02.png",title:"List of courses returned for the entered credentials"})]})]})},(0,e.s)(d.Z,"enable-basic-auth"))}},function(a){a.O(0,[116,891,637,462,774,888,179],function(){var b;return a(a.s=5604)}),_N_E=a.O()}])